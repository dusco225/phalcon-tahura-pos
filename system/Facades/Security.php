<?php
namespace Core\Facades;

/**
 * Class Security
 * @package Core\Facades
 * 
 * This component provides a set of functions to improve the security in Phalcon
 * applications
 *
 * ```php
 * $login    = $this->request->getPost("login");
 * $password = $this->request->getPost("password");
 *
 * $user = Users::findFirstByLogin($login);
 *
 * if ($user) {
 *     if (Security::checkHash($password, $user->password)) {
 *         // The password is valid
 *     }
 * }
 * ```
 * @method static int getWorkFactor()
 *
 * @method static bool checkHash(string $password, string $passwordHash, int $maxPassLength = 0)
 * Checks a plain text password and its hash version to check if the
 * password matches
 *
 * @method static bool checkToken($tokenKey = null, $tokenValue = null, bool $destroyIfValid = true)
 * Check if the CSRF token sent in the request is the same that the current
 * in session
 *
 * @method static string computeHmac(string $data, string $key, string $algo, bool $raw = false)
 * Computes a HMAC
 *
 * @method static \Phalcon\Security destroyToken()
 * Removes the value of the CSRF token and key from session
 *
 * @method static ?int getDefaultHash()
 * Returns the default hash
 *
 * @method static \Phalcon\Security\Random getRandom()
 * Returns a secure random number generator instance
 *
 * @method static int getRandomBytes()
 * Returns a number of bytes to be generated by the openssl pseudo random
 * generator
 *
 * @method static ?string getRequestToken()
 * Returns the value of the CSRF token for the current request.
 *
 * @method static ?string getSessionToken()
 * Returns the value of the CSRF token in session
 *
 * @method static string getSaltBytes(int $numberBytes = 0)
 * Generate a >22-length pseudo random string to be used as salt for
 * passwords
 *
 * @method static string getToken()
 * Generates a pseudo random token value to be used as input's value in a
 * CSRF check
 *
 * @method static string getTokenKey()
 * Generates a pseudo random token key to be used as input's name in a CSRF
 * check
 *
 * @method static string hash(string $password, int $workFactor = 0)
 * Creates a password hash using bcrypt with a pseudo random salt
 *
 * @method static bool isLegacyHash(string $passwordHash)
 * Checks if a password hash is a valid bcrypt's hash
 *
 * @method static \Phalcon\Security setDefaultHash(int $defaultHash)
 * Sets the default hash
 *
 * @method static \Phalcon\Security setRandomBytes(int $randomBytes)
 * Sets a number of bytes to be generated by the openssl pseudo random
 * generator
 *
 * @method static \Phalcon\Security setWorkFactor(int $workFactor)
 * Sets the work factor
 *
 */
class Security extends Facade
{
    protected static function getFacadeAccessor()
    {
        return 'security';
    }
}